version: '3'

vars:
  PRJ_DIR: paasify

includes:

  dev:
    taskfile: ./scripts/Taskfile.dev.yml
    dir: .

  release:
    taskfile: ./scripts/Taskfile.release.yml
    dir: .

  doc:
    taskfile: ./docs/Taskfile.yml
    dir: ./docs
    optional: true

  docker:
    taskfile: ./docker/Taskfile.yml
    optional: true

  extra:
    taskfile: ./scripts/Taskfile.extra.yml
    dir: .
    optional: true

tasks:

  # Generic helpers
  # -----------------

  default:
    desc: Show all commands
    cmds:
      - task --list-all

  # Project helpers
  # -----------------

  bootstrap:
    desc: Bootstrap environment
    sources:
      - poetry.lock
    cmds:
      - 'poetry --version >&/dev/null || pip install --upgrade poetry'
      - poetry config --list
      - poetry install -vv --no-interaction --no-root
      - |2
        if poetry run pre-commit >&/dev/null; then
          poetry run pre-commit install --install-hooks
        fi

  setup:
    desc: Setup project
    deps:
      - bootstrap
    sources:
      - "{{.PRJ_DIR}}/*"
    cmds:
      - poetry install -vv --no-interaction --only-root

  update:
    desc: Synchronize git
    cmds:
      - git fetch -a && git pull
      - task: setup


  # Build workflow
  # -----------------

  build:
    desc: Create a python package
    run: once
    # Used by semantic-release during publish process, as pre-commit command
    #sources:
    #  - pyproject.toml
    cmds:
      - task: clean
      - poetry build
      - cp CHANGELOG.md dist/CHANGELOG.md
      - cp VERSION_NOTES.md dist/RELEASE.md

  clean:
    desc: Clean generated packages
    status:
      - test ! -d dist/
    cmds:
      - rm -rf dist/ && mkdir -p dist


  # Test Workflow
  # ---------------
  fix_qa:
    desc: Run short test suites
    deps:
      - dev:lint_black
      - dev:lint_precommit

  run_qa:
    desc: Run short test suites
    deps:
      - dev:report_lint
      - dev:check_black

  run_tests:
    desc: Run full test suites
    deps:
      - dev:test
    cmds:
      - task: dev:report_cov
      - task: dev:report_lint


  # Release workflow
  # -----------------

  version:
    desc: Show versions status
    cmds:
      - poetry run ./scripts/versions.sh

  release_changelog:
    desc: "Used by semantic-release during publish process, as pre-commit command"
    cmds:
      - poetry run semantic-release changelog --unreleased > VERSION_NOTES.md

  release_stable:
    desc: Bump code to stable version, generate changelog, create a tag
    preconditions:
      - sh: '[[ -n "${GH_TOKEN-}" ]]'
        msg: Please set GH_TOKEN environment variable
      - sh: '[[ -n "${POETRY_PYPI_TOKEN_PYPI-}" ]]'
        msg: Please set POETRY_PYPI_TOKEN_PYPI environment variable
      - sh: >
          [[ "$(git rev-parse --abbrev-ref HEAD)" == main ]]
        msg: You must checkout 'main' branch first
      - sh: >
          git status -s | not grep -E '^[AM]* '
        msg: You must clean your working dir first
    cmds:
      - git pull --no-ff
      - SKIP=end-of-file-fixer poetry run semantic-release -D tag_commit=true publish
      - task: publish

  release_beta:
    aliases:
      - release
    desc: Bump code to beta version, generate changelog, create a tag
    vars:
      BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
    preconditions:
      - sh: '[[ -n "${GH_TOKEN-}" ]]'
        msg: Please set GH_TOKEN environment variable
      - sh: '[[ -n "${POETRY_PYPI_TOKEN_PYPI-}" ]]'
        msg: Please set POETRY_PYPI_TOKEN_PYPI environment variable
      - sh: '[[ :develop:main: =~ :{{.BRANCH}}: ]]'
        msg: You must checkout 'develop' branch first
      - sh: git status -s | not grep -E '^[AM]* '
        msg: You must clean your working dir first
    cmds:
      - git pull --no-ff
      - >
        SKIP=end-of-file-fixer poetry run semantic-release
        -D tag_commit=true
        -D branch={{.BRANCH}}
        publish --prerelease
      - task: publish


  # Publish workflow
  # -----------------

  publish:
    desc: Publish everything (GH, Pypi, Doc)
    cmds:
      - task: publish_gh
      - task: publish_pypi
      - task: doc:publish_gh

  publish_pypi:
    desc: Publish python package on pypi.org
    deps:
      - build
    preconditions:
      - sh: '[[ -n "${POETRY_PYPI_TOKEN_PYPI-}" ]]'
        msg: Please set POETRY_PYPI_TOKEN_PYPI environment variable
    cmds:
      - poetry publish

  publish_gh:
    desc: Publish python packge on a github release
    env:
      INPUT_PRERELEASE: false
      INPUT_ALLOW_OVERRIDE: true
    preconditions:
      - sh: '[[ -n "${GH_TOKEN-}" ]]'
        msg: Please set GH_TOKEN environment variable

    vars:
      INPUT_TOKEN:
        sh: echo "$GH_TOKEN"
      BODY_HEADER: |
        ## What's new in this version ?

        This release has been published: $(date --utc)

        ## List of changes:

        $(cat VERSION_NOTES.md)

    deps:
      - build
    cmds:
      - INPUT_BODY="{{.BODY_HEADER}}" INPUT_TOKEN={{.INPUT_TOKEN}} bash scripts/publish_github.sh
