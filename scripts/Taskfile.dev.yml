version: '3'

vars:
  SRC_DIR: paasify
  TEST_DIR: tests/
  POETRY_VERSION: '1.2.2'
  DIRENV_VERSION: 'latest'
  TASK_VERSION: 'v3.18.0'

anchors:
  sources_module: &PAASIFY_MODULE
    - "{{.SRC_DIR}}/*.py"
  sources_python: &PAASIFY_CODE
    - "{{.SRC_DIR}}/*.py"
    - "{{.SRC_DIR}}/tests/*"
  cmd_check_git: &CHECK_STAGE_GIT >2
    git status --porcelain | grep '^.M {{.SRC_DIR}}/' && {
      echo "ERROR: Uncommited files !";
      exit 1;
    } || exit 0

tasks:

  # Helpers
  # ---------------
  dev_changlog:
    desc: Show currently modified things
    cmds:
      - poetry run semantic-release changelog --noop --unreleased

  fake_fix:
    desc: Generate fake patch commits
    cmds:
      - 'git commit --allow-empty  -m "fix: simple bugfix1"'
      - 'git commit --allow-empty  -m "fix: simple bugfix2"'
      - 'git commit --allow-empty  -m "fix: simple bugfix3"'

  fake_feat:
    desc: Generate fake feature commits
    cmds:
      - 'git commit --allow-empty  -m "feat: new feature1"'
      - 'git commit --allow-empty  -m "feat: new feature2"'
      - 'git commit --allow-empty  -m "feat: new feature3"'


  # Project CI
  # ---------------

  test:
    desc: Run tests
    run: once
    sources: *PAASIFY_CODE
    cmds:
      - pytest -sx {{.CLI_ARGS}}

  lint_precommit:
    desc: Run pre-commit hooks
    run: once
    cmds:
      - pre-commit run --show-diff-on-failure
        #- pre-commit run --all-files --show-diff-on-failure

  lint_black:
    desc: Autolint codes
    run: once
    sources: *PAASIFY_CODE
    cmds:
      - *CHECK_STAGE_GIT
      - >2
        black {{.SRC_DIR}} || { echo "Please review your changes and add them into git"; false; }

  check_black:
    desc: Autolint codes
      #run: once
    sources: *PAASIFY_CODE
    cmds:
      - black --check {{.SRC_DIR}}


  # Reporting tools
  # ---------------

  report_cov:
    desc: Test coverage status
    run: once
      #sources: *PAASIFY_MODULE
    cmds:
      - pytest --cov={{.SRC_DIR}} tests {{.CLI_ARGS}}

  report_lint:
    desc: Report linting status
    run: once
      #sources: *PAASIFY_CODE
    cmds:
      - pylint --output-format=colorized {{.SRC_DIR}} || true


  # Completion for develop user
  # ---------------

  install_comp:
    desc: Install project completion
    deps:
      - install_comp_poetry
      - install_comp_task
    cmds:
      - 'echo "Enable completions with: . scripts/enable_completion.sh"'

  install_comp_poetry:
    desc: Install poetry completion in the project
    vars:
      DEST:
        sh: echo "${VIRTUAL_ENV:-$PWD}/comp"
    cmds:
      - mkdir -p "{{.DEST}}"
      - poetry completions bash >> "{{.DEST}}/poetry.sh"
      - >
        echo "Enable task completion with: . {{.DEST}}/poetry.sh"

  install_comp_task:
    desc: Install task in the project
    vars:
      DEST:
        sh: echo "${VIRTUAL_ENV:-$PWD}/comp"
    cmds:
      - mkdir -p "{{.DEST}}"
      - curl https://raw.githubusercontent.com/go-task/task/master/completion/bash/task.bash --output "{{.DEST}}/task.sh"
      - >
        echo "Enable task completion with: . {{.DEST}}/task.sh"


  # External tools bootstrap
  # ---------------


  #bootstrap_task:
  #  desc: Install project dependencies
  #  cmds:
  #    - |2
  #      if ! task --version | grep -q "{{.TASK_VERSION}}"; then
  #        mkdir -p "{{.LOCAL_BIN}}"
  #        GITHUB_RELEASE_URL="https://github.com/go-task/task/releases/download"
  #        TASK_ARCH=amd64
  #        TASK_URL="${GITHUB_RELEASE_URL}/{{.TASK_VERSION}}/task_linux_${TASK_ARCH}.tar.gz"
  #        curl -L --output /tmp/go-task.tar.gz "$TASK_URL"
  #        tar xzvf /tmp/go-task.tar.gz  -C "{{.LOCAL_BIN}}" task
  #        >&2 echo "INFO: Task has been installed ({{.TASK_VERSION}})"
  #      else
  #        >&2 echo "INFO: Task is already installed ({{.TASK_VERSION}})"
  #      fi

  #bootstrap_poetry:
  #  desc: Install Poetry
  #  #sources:
  #  #  - poetry.lock
  #  #generates:
  #  #  - "$VIRTUAL_ENV/bin/python"
  #  cmds:
  #    #- python -m pip install --upgrade pip virtualenv
  #    #- '[[ -f "{{.PYTHON_BIN}}/python" ]] || virtualenv {{.VIRTUALENV}}'

  #    #- "{{.PYTHON_BIN}}/pip install --upgrade poetry=={{.POETRY_VERSION}}"
  #    #- "{{.PYTHON_BIN}}/poetry config virtualenvs.path {{.VIRTUALENV}}"
  #    #- "{{.PYTHON_BIN}}/poetry config virtualenvs.create true"
  #    #- "{{.PYTHON_BIN}}/poetry install -vv --no-interaction --no-root"
